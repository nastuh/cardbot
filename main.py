from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import logging
import json
import os
import random
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'user_data.json'

# –í–∞–ª—é—Ç–∞
CURRENCY = "üçú"  # –≠–º–æ–¥–∑–∏ –ª–∞–ø—à–∏ –∫–∞–∫ –≤–∞–ª—é—Ç–∞

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as file:
            return json.load(file)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_data(data):
    with open(DATA_FILE, 'w') as file:
        json.dump(data, file)

# –ö–æ–º–∞–Ω–¥–∞ /noodles
def noodles(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    data = load_data()
    if user_id not in data:
        data[user_id] = {"noodles": 0, "currency": 0, "level": 1, "nickname": update.message.from_user.first_name}
    data[user_id]["noodles"] += 0.5
    data[user_id]["currency"] += 1
    save_data(data)
    update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ 0.5 –º –ª–∞–ø—à–∏! –í—Å–µ–≥–æ –ª–∞–ø—à–∏: {data[user_id]['noodles']} –º. –í–∞–ª—é—Ç–∞: {data[user_id]['currency']} {CURRENCY} üòã")

# –ö–æ–º–∞–Ω–¥–∞ /leaderboard
def leaderboard(update: Update, context: CallbackContext):
    data = load_data()
    sorted_users = sorted(data.items(), key=lambda x: x[1]['noodles'], reverse=True)
    leaderboard_message = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n"
    for user_id, user_data in sorted_users:
        leaderboard_message += f"{user_data['nickname']}: {user_data['noodles']} –º –ª–∞–ø—à–∏, –£—Ä–æ–≤–µ–Ω—å: {user_data['level']} üåü\n"
    update.message.reply_text(leaderboard_message)

# –ö–æ–º–∞–Ω–¥–∞ /cook
def cook(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–ø—Ä–∞–≤—ã üå∂", callback_data='add_spices')],
        [InlineKeyboardButton("–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ª–∞–ø—à—É üçú", callback_data='cook_noodles')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
def button(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = str(query.from_user.id)
    data = load_data()
    if query.data == 'add_spices':
        if data[user_id]['currency'] >= 5:
            data[user_id]['currency'] -= 5
            data[user_id]['noodles'] += 1
            save_data(data)
            query.edit_message_text(text=f"–ü—Ä–∏–ø—Ä–∞–≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {data[user_id]['noodles']} –º –ª–∞–ø—à–∏. üå∂")
        else:
            query.edit_message_text(text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ø—Ä–∞–≤! üòî")
    elif query.data == 'cook_noodles':
        if data[user_id]['noodles'] >= 1:
            data[user_id]['noodles'] -= 1
            data[user_id]['currency'] += 10
            save_data(data)
            query.edit_message_text(text=f"–õ–∞–ø—à–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 {CURRENCY}. üçú")
        else:
            query.edit_message_text(text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∞–ø—à–∏ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è! üò¢")

# –ö–æ–º–∞–Ω–¥–∞ /upgrade
def upgrade(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    data = load_data()
    if data[user_id]['currency'] >= 20:
        data[user_id]['currency'] -= 20
        data[user_id]['level'] += 1
        save_data(data)
        update.message.reply_text(f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å: {data[user_id]['level']} üìà")
    else:
        update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è! üö´")

# –ö–æ–º–∞–Ω–¥–∞ /buy
def buy(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø—Ä–∏–ø—Ä–∞–≤—ã (5 üçú) üå∂", callback_data='buy_spices')],
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (10 üçú) ü•ï", callback_data='buy_ingredients')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:', reply_markup=reply_markup)


# –ö–æ–º–∞–Ω–¥–∞ /me
def me(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    data = load_data()
    if user_id in data:
        user_data = data[user_id]
        update.message.reply_text(f"üë§ –ù–∏–∫: {user_data['nickname']}\nüçú –õ–∞–ø—à–∞: {user_data['noodles']} –º\nüí∞ –í–∞–ª—é—Ç–∞: {user_data['currency']} {CURRENCY}\nüìà –£—Ä–æ–≤–µ–Ω—å: {user_data['level']}")
    else:
        update.message.reply_text("–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å –ª–∞–ø—à—É! üçú")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    updater = Updater("7723033569:AAFlg_R_Cta3IPuz8pC7y4W5cIz_qLcfUds")
    dp = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("noodles", noodles))
    dp.add_handler(CommandHandler("leaderboard", leaderboard))
    dp.add_handler(CommandHandler("cook", cook))
    dp.add_handler(CommandHandler("upgrade", upgrade))
    dp.add_handler(CommandHandler("buy", buy))
    dp.add_handler(CommandHandler("me", me))
    dp.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
